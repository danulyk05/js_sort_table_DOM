{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","tbody","ths","querySelectorAll","trs","sortTable","columnIndex","ascending","rows","order","sort","a","b","aValue","children","textContent","trim","bValue","length","parseInt","replace","forEach","row","appendChild","th","index","addEventListener","isAscending","classList","contains","thr","remove","add"],"mappings":";AAAA,aAgCA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA9BA,IAAMA,EAAQC,SAASC,cAAc,SAC/BC,EAAQH,EAAME,cAAc,SAC5BE,EAAMJ,EAAMK,iBAAiB,mBAC7BC,EAAMH,EAAME,iBAAiB,MAEnC,SAASE,EAAUC,EAAaC,GACxBC,IAAAA,EAAWJ,EAAAA,GACXK,EAAQF,EAAY,GAAK,EAE/BC,EAAKE,KAAK,SAACC,EAAGC,GACNC,IAAAA,EAASF,EAAEG,SAASR,GAAaS,YAAYC,OAC7CC,EAASL,EAAEE,SAASR,GAAaS,YAAYC,OAE/CV,OAAAA,IAAgBJ,EAAIgB,OAAS,EACfC,SAASN,EAAOO,QAAQ,QAAS,KACjCD,SAASF,EAAOG,QAAQ,QAAS,KAEtBX,GAASA,EAGlCI,IAAWI,EACN,EAGFJ,EAASI,EAASR,GAASA,IAGpCD,EAAKa,QAAQ,SAAAC,GAAOrB,OAAAA,EAAMsB,YAAYD,KAGxCpB,EAAImB,QAAQ,SAACG,EAAIC,GACfD,EAAGE,iBAAiB,QAAS,WACrBC,IAAAA,EAAcH,EAAGI,UAAUC,SAAS,OAE1C3B,EAAImB,QAAQ,SAAAS,GAAOA,OAAAA,EAAIF,UAAUG,OAAO,MAAO,UAE3CJ,GACFtB,EAAUoB,GAAO,GACjBD,EAAGI,UAAUI,IAAI,UAEjB3B,EAAUoB,GAAO,GACjBD,EAAGI,UAAUI,IAAI","file":"main.72167903.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('table');\nconst tbody = table.querySelector('tbody');\nconst ths = table.querySelectorAll('thead > tr > th');\nconst trs = tbody.querySelectorAll('tr');\n\nfunction sortTable(columnIndex, ascending) {\n  const rows = [...trs];\n  const order = ascending ? 1 : -1;\n\n  rows.sort((a, b) => {\n    const aValue = a.children[columnIndex].textContent.trim();\n    const bValue = b.children[columnIndex].textContent.trim();\n\n    if (columnIndex === ths.length - 1) {\n      const aSalary = parseInt(aValue.replace(/[$,]/g, ''));\n      const bSalary = parseInt(bValue.replace(/[$,]/g, ''));\n\n      return aSalary > bSalary ? order : -order;\n    }\n\n    if (aValue === bValue) {\n      return 0;\n    }\n\n    return aValue > bValue ? order : -order;\n  });\n\n  rows.forEach(row => tbody.appendChild(row));\n}\n\nths.forEach((th, index) => {\n  th.addEventListener('click', () => {\n    const isAscending = th.classList.contains('asc');\n\n    ths.forEach(thr => thr.classList.remove('asc', 'desc'));\n\n    if (isAscending) {\n      sortTable(index, false);\n      th.classList.add('desc');\n    } else {\n      sortTable(index, true);\n      th.classList.add('asc');\n    }\n  });\n});\n"]}